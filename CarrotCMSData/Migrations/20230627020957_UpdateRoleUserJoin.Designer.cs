// <auto-generated />
using System;
using Carrotware.CMS.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carrotware.CMS.Data.Migrations
{
    [DbContext(typeof(CarrotCakeContext))]
    [Migration("20230627020957_UpdateRoleUserJoin")]
    partial class UpdateRoleUserJoin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserRoles_UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotCategoryContentMapping", b =>
                {
                    b.Property<Guid>("CategoryContentMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryContentMappingID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ContentCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentCategoryID");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.HasKey("CategoryContentMappingId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CategoryContentMappingId"), false);

                    b.HasIndex("ContentCategoryId");

                    b.HasIndex("RootContentId");

                    b.ToTable("carrot_CategoryContentMapping", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContent", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CreditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("EditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("bit");

                    b.Property<string>("LeftPageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("NavMenuText")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NavOrder")
                        .HasColumnType("int");

                    b.Property<string>("PageHead")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Parent_ContentID");

                    b.Property<string>("RightPageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.Property<string>("TemplateFile")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TitleBar")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ContentId");

                    b.HasIndex("CreditUserId");

                    b.HasIndex(new[] { "EditUserId" }, "IDX_carrot_Content_EditUserId");

                    b.HasIndex(new[] { "RootContentId" }, "IDX_carrot_Content_Root_ContentID");

                    b.ToTable("carrot_Content", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentCategory", b =>
                {
                    b.Property<Guid>("ContentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentCategoryID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CategorySlug")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CategoryText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.HasKey("ContentCategoryId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ContentCategoryId"), false);

                    b.HasIndex("SiteId");

                    b.ToTable("carrot_ContentCategory", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentComment", b =>
                {
                    b.Property<Guid>("ContentCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentCommentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CommenterEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CommenterIp")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("CommenterIP");

                    b.Property<string>("CommenterName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CommenterUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CommenterURL");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpam")
                        .HasColumnType("bit");

                    b.Property<string>("PostComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.HasKey("ContentCommentId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ContentCommentId"), false);

                    b.HasIndex("RootContentId");

                    b.ToTable("carrot_ContentComment", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentSnippet", b =>
                {
                    b.Property<Guid>("ContentSnippetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentSnippetID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ContentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("bit");

                    b.Property<Guid>("RootContentSnippetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentSnippetID");

                    b.HasKey("ContentSnippetId");

                    b.HasIndex("RootContentSnippetId");

                    b.ToTable("carrot_ContentSnippet", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentTag", b =>
                {
                    b.Property<Guid>("ContentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTagID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<string>("TagSlug")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TagText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ContentTagId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ContentTagId"), false);

                    b.HasIndex("SiteId");

                    b.ToTable("carrot_ContentTag", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentTally", b =>
                {
                    b.Property<string>("DateSlug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ContentCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateMonth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SiteID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DateSlug");

                    b.ToTable("CarrotContentTallies");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentType", b =>
                {
                    b.Property<Guid>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ContentTypeValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ContentTypeId")
                        .HasName("carrot_ContentType_PK");

                    b.ToTable("carrot_ContentType", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotRootContent", b =>
                {
                    b.Property<Guid>("RootContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("BlockIndex")
                        .HasColumnType("bit");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTypeID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditHeartbeat")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("GoLiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime>("GoLiveDateLocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid?>("HeartbeatUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Heartbeat_UserId");

                    b.Property<bool>("PageActive")
                        .HasColumnType("bit");

                    b.Property<string>("PageSlug")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PageThumbnail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("RetireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool>("ShowInSiteMap")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInSiteNav")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.HasKey("RootContentId")
                        .HasName("carrot_RootContent_PK");

                    b.HasIndex(new[] { "ContentTypeId" }, "IDX_carrot_RootContent_ContentTypeID");

                    b.HasIndex(new[] { "CreateUserId" }, "IDX_carrot_RootContent_CreateUserId");

                    b.HasIndex(new[] { "SiteId" }, "IDX_carrot_RootContent_SiteID");

                    b.ToTable("carrot_RootContent", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotRootContentSnippet", b =>
                {
                    b.Property<Guid>("RootContentSnippetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentSnippetID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("ContentSnippetActive")
                        .HasColumnType("bit");

                    b.Property<string>("ContentSnippetName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContentSnippetSlug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditHeartbeat")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HeartbeatUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Heartbeat_UserId");

                    b.Property<DateTime>("RetireDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.HasKey("RootContentSnippetId");

                    b.HasIndex("SiteId");

                    b.ToTable("carrot_RootContentSnippet", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotSerialCache", b =>
                {
                    b.Property<Guid>("SerialCacheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SerialCacheID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("EditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemID");

                    b.Property<string>("KeyType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SerializedData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.HasKey("SerialCacheId")
                        .HasName("carrot_SerialCache_PK");

                    b.ToTable("carrot_SerialCache", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotSite", b =>
                {
                    b.Property<Guid>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("BlockIndex")
                        .HasColumnType("bit");

                    b.Property<string>("BlogCategoryPath")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Blog_CategoryPath");

                    b.Property<string>("BlogDatePath")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Blog_DatePath");

                    b.Property<string>("BlogDatePattern")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("Blog_DatePattern");

                    b.Property<string>("BlogEditorPath")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Blog_EditorPath");

                    b.Property<string>("BlogFolderPath")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Blog_FolderPath");

                    b.Property<Guid?>("BlogRootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Blog_Root_ContentID");

                    b.Property<string>("BlogTagPath")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Blog_TagPath");

                    b.Property<string>("MainUrl")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("MainURL");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SiteName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SiteTagline")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SiteTitlebarPattern")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("SiteId")
                        .HasName("carrot_Sites_PK");

                    b.ToTable("carrot_Sites", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotTagContentMapping", b =>
                {
                    b.Property<Guid>("TagContentMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TagContentMappingID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ContentTagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTagID");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.HasKey("TagContentMappingId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("TagContentMappingId"), false);

                    b.HasIndex("ContentTagId");

                    b.HasIndex("RootContentId");

                    b.ToTable("carrot_TagContentMapping", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotTextWidget", b =>
                {
                    b.Property<Guid>("TextWidgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextWidgetID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("ProcessBody")
                        .HasColumnType("bit");

                    b.Property<bool>("ProcessComment")
                        .HasColumnType("bit");

                    b.Property<bool>("ProcessHtmlText")
                        .HasColumnType("bit")
                        .HasColumnName("ProcessHTMLText");

                    b.Property<bool>("ProcessPlainText")
                        .HasColumnType("bit");

                    b.Property<bool>("ProcessSnippet")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<string>("TextWidgetAssembly")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("TextWidgetId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("TextWidgetId"), false);

                    b.HasIndex("SiteId");

                    b.ToTable("carrot_TextWidget", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotUserData", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserNickName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("UserId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("UserId"), false);

                    b.HasIndex("UserKey");

                    b.ToTable("carrot_UserData", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotUserSiteMapping", b =>
                {
                    b.Property<Guid>("UserSiteMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserSiteMappingID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserSiteMappingId")
                        .HasName("carrot_UserSiteMapping_PK");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("carrot_UserSiteMapping", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotWidget", b =>
                {
                    b.Property<Guid>("RootWidgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_WidgetID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ControlPath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PlaceholderName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RetireDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.Property<bool>("WidgetActive")
                        .HasColumnType("bit");

                    b.Property<int>("WidgetOrder")
                        .HasColumnType("int");

                    b.HasKey("RootWidgetId");

                    b.HasIndex("RootContentId");

                    b.ToTable("carrot_Widget", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotWidgetData", b =>
                {
                    b.Property<Guid>("WidgetDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WidgetDataID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ControlProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("bit");

                    b.Property<Guid>("RootWidgetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_WidgetID");

                    b.HasKey("WidgetDataId");

                    b.HasIndex("RootWidgetId");

                    b.ToTable("carrot_WidgetData", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotCategoryCounted", b =>
                {
                    b.Property<Guid>("ContentCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentCategoryID");

                    b.Property<string>("CategorySlug")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CategoryText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.HasKey("ContentCategoryId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_CategoryCounted", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotCategoryUrl", b =>
                {
                    b.Property<Guid>("ContentCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentCategoryID");

                    b.Property<string>("CategoryText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CategoryUrl")
                        .HasMaxLength(387)
                        .HasColumnType("nvarchar(387)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("PublicUseCount")
                        .HasColumnType("int");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.HasKey("ContentCategoryId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_CategoryURL", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotComment", b =>
                {
                    b.Property<Guid>("ContentCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentCommentID");

                    b.Property<bool>("BlockIndex")
                        .HasColumnType("bit");

                    b.Property<string>("CommenterEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CommenterIp")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("CommenterIP");

                    b.Property<string>("CommenterName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CommenterUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CommenterURL");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTypeID");

                    b.Property<string>("ContentTypeValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpam")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnReleased")
                        .HasColumnType("bit");

                    b.Property<string>("NavMenuText")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("PageActive")
                        .HasColumnType("bit");

                    b.Property<string>("PageHead")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PostComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RetireDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.Property<bool>("ShowInSiteMap")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInSiteNav")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<string>("TitleBar")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ContentCommentId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_Comment", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotContent", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentID");

                    b.Property<bool>("BlockIndex")
                        .HasColumnType("bit");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTypeID");

                    b.Property<string>("ContentTypeValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EditHeartbeat")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("GoLiveDateLocal")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HeartbeatUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Heartbeat_UserId");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnReleased")
                        .HasColumnType("bit");

                    b.Property<string>("LeftPageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("NavMenuText")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NavOrder")
                        .HasColumnType("int");

                    b.Property<bool>("PageActive")
                        .HasColumnType("bit");

                    b.Property<string>("PageHead")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PageSlug")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageThumbnail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("ParentContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Parent_ContentID");

                    b.Property<DateTime>("RetireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RightPageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.Property<bool>("ShowInSiteMap")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInSiteNav")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<string>("TemplateFile")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TitleBar")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("VersionCount")
                        .HasColumnType("int");

                    b.HasKey("ContentId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_Content", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotContentChild", b =>
                {
                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsParentRetired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsParentUnReleased")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnReleased")
                        .HasColumnType("bit");

                    b.Property<Guid>("ParentContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Parent_ContentID");

                    b.Property<string>("ParentFileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ParentGoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ParentRetireDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RetireDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.HasKey("RootContentId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_ContentChild", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotContentSnippet", b =>
                {
                    b.Property<Guid>("ContentSnippetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentSnippetID");

                    b.Property<string>("ContentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContentSnippetActive")
                        .HasColumnType("bit");

                    b.Property<string>("ContentSnippetName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContentSnippetSlug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EditHeartbeat")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HeartbeatUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Heartbeat_UserId");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnReleased")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RetireDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("RootContentSnippetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentSnippetID");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<int?>("VersionCount")
                        .HasColumnType("int");

                    b.HasKey("ContentSnippetId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_ContentSnippet", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotEditHistory", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentID");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTypeID");

                    b.Property<string>("ContentTypeValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("CreditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EditEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("EditUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EditUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("bit");

                    b.Property<string>("NavMenuText")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("PageActive")
                        .HasColumnType("bit");

                    b.Property<string>("PageHead")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RetireDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<string>("TitleBar")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ContentId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_EditHistory", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotEditorUrl", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PublicUseCount")
                        .HasColumnType("int");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserUrl")
                        .HasMaxLength(387)
                        .HasColumnType("nvarchar(387)");

                    b.HasKey("UserId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_EditorURL", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotTagCounted", b =>
                {
                    b.Property<Guid>("ContentTagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTagID");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<string>("TagSlug")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TagText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.HasKey("ContentTagId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_TagCounted", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotTagUrl", b =>
                {
                    b.Property<Guid>("ContentTagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTagID");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("PublicUseCount")
                        .HasColumnType("int");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<string>("TagText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TagUrl")
                        .HasMaxLength(387)
                        .HasColumnType("nvarchar(387)");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.HasKey("ContentTagId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_TagURL", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotUserData", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserNickName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("UserId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_UserData", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.vwCarrotWidget", b =>
                {
                    b.Property<Guid>("RootWidgetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_WidgetID");

                    b.Property<string>("ControlPath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ControlProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnReleased")
                        .HasColumnType("bit");

                    b.Property<string>("PlaceholderName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RetireDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("RootContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Root_ContentID");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.Property<bool>("WidgetActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("WidgetDataId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WidgetDataID");

                    b.Property<int>("WidgetOrder")
                        .HasColumnType("int");

                    b.HasKey("RootWidgetId");

                    b.ToTable((string)null);

                    b.ToView("vw_carrot_Widget", (string)null);
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUserRole", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carrotware.CMS.Data.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotCategoryContentMapping", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotContentCategory", "ContentCategory")
                        .WithMany("CarrotCategoryContentMappings")
                        .HasForeignKey("ContentCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_CategoryContentMapping_ContentCategoryID");

                    b.HasOne("Carrotware.CMS.Data.Models.CarrotRootContent", "RootContent")
                        .WithMany("CarrotCategoryContentMappings")
                        .HasForeignKey("RootContentId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_CategoryContentMapping_Root_ContentID");

                    b.Navigation("ContentCategory");

                    b.Navigation("RootContent");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContent", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotUserData", "CreditUser")
                        .WithMany("CarrotContentCreditUsers")
                        .HasForeignKey("CreditUserId")
                        .HasConstraintName("carrot_Content_CreditUserId_FK");

                    b.HasOne("Carrotware.CMS.Data.Models.CarrotUserData", "EditUser")
                        .WithMany("CarrotContentEditUsers")
                        .HasForeignKey("EditUserId")
                        .HasConstraintName("carrot_Content_EditUserId_FK");

                    b.HasOne("Carrotware.CMS.Data.Models.CarrotRootContent", "RootContent")
                        .WithMany("CarrotContents")
                        .HasForeignKey("RootContentId")
                        .IsRequired()
                        .HasConstraintName("carrot_RootContent_carrot_Content_FK");

                    b.Navigation("CreditUser");

                    b.Navigation("EditUser");

                    b.Navigation("RootContent");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentCategory", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotSite", "Site")
                        .WithMany("CarrotContentCategories")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_ContentCategory_SiteID");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentComment", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotRootContent", "RootContent")
                        .WithMany("CarrotContentComments")
                        .HasForeignKey("RootContentId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_ContentComment_Root_ContentID");

                    b.Navigation("RootContent");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentSnippet", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotRootContentSnippet", "RootContentSnippet")
                        .WithMany("CarrotContentSnippets")
                        .HasForeignKey("RootContentSnippetId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_ContentSnippet_Root_ContentSnippetID");

                    b.Navigation("RootContentSnippet");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentTag", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotSite", "Site")
                        .WithMany("CarrotContentTags")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_ContentTag_SiteID");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotRootContent", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotContentType", "ContentType")
                        .WithMany("CarrotRootContents")
                        .HasForeignKey("ContentTypeId")
                        .IsRequired()
                        .HasConstraintName("carrot_ContentType_carrot_RootContent_FK");

                    b.HasOne("Carrotware.CMS.Data.Models.CarrotUserData", "CreateUser")
                        .WithMany("CarrotRootContents")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("carrot_RootContent_CreateUserId_FK");

                    b.HasOne("Carrotware.CMS.Data.Models.CarrotSite", "Site")
                        .WithMany("CarrotRootContents")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("carrot_Sites_carrot_RootContent_FK");

                    b.Navigation("ContentType");

                    b.Navigation("CreateUser");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotRootContentSnippet", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotSite", "Site")
                        .WithMany("CarrotRootContentSnippets")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_RootContentSnippet_SiteID");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotTagContentMapping", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotContentTag", "ContentTag")
                        .WithMany("CarrotTagContentMappings")
                        .HasForeignKey("ContentTagId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_TagContentMapping_ContentTagID");

                    b.HasOne("Carrotware.CMS.Data.Models.CarrotRootContent", "RootContent")
                        .WithMany("CarrotTagContentMappings")
                        .HasForeignKey("RootContentId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_TagContentMapping_Root_ContentID");

                    b.Navigation("ContentTag");

                    b.Navigation("RootContent");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotTextWidget", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotSite", "Site")
                        .WithMany("CarrotTextWidgets")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_TextWidget_SiteID");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotUserData", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.AspNetUser", "UserKeyNavigation")
                        .WithMany("CarrotUserData")
                        .HasForeignKey("UserKey")
                        .HasConstraintName("FK_carrot_UserData_AspNetUsers");

                    b.Navigation("UserKeyNavigation");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotUserSiteMapping", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotSite", "Site")
                        .WithMany("CarrotUserSiteMappings")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("carrot_Sites_carrot_UserSiteMapping_FK");

                    b.HasOne("Carrotware.CMS.Data.Models.CarrotUserData", "User")
                        .WithMany("CarrotUserSiteMappings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("aspnet_Users_carrot_UserSiteMapping_FK");

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotWidget", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotRootContent", "RootContent")
                        .WithMany("CarrotWidgets")
                        .HasForeignKey("RootContentId")
                        .IsRequired()
                        .HasConstraintName("carrot_RootContent_carrot_Widget_FK");

                    b.Navigation("RootContent");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotWidgetData", b =>
                {
                    b.HasOne("Carrotware.CMS.Data.Models.CarrotWidget", "RootWidget")
                        .WithMany("CarrotWidgetData")
                        .HasForeignKey("RootWidgetId")
                        .IsRequired()
                        .HasConstraintName("carrot_WidgetData_Root_WidgetID_FK");

                    b.Navigation("RootWidget");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("CarrotUserData");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentCategory", b =>
                {
                    b.Navigation("CarrotCategoryContentMappings");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentTag", b =>
                {
                    b.Navigation("CarrotTagContentMappings");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotContentType", b =>
                {
                    b.Navigation("CarrotRootContents");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotRootContent", b =>
                {
                    b.Navigation("CarrotCategoryContentMappings");

                    b.Navigation("CarrotContentComments");

                    b.Navigation("CarrotContents");

                    b.Navigation("CarrotTagContentMappings");

                    b.Navigation("CarrotWidgets");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotRootContentSnippet", b =>
                {
                    b.Navigation("CarrotContentSnippets");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotSite", b =>
                {
                    b.Navigation("CarrotContentCategories");

                    b.Navigation("CarrotContentTags");

                    b.Navigation("CarrotRootContentSnippets");

                    b.Navigation("CarrotRootContents");

                    b.Navigation("CarrotTextWidgets");

                    b.Navigation("CarrotUserSiteMappings");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotUserData", b =>
                {
                    b.Navigation("CarrotContentCreditUsers");

                    b.Navigation("CarrotContentEditUsers");

                    b.Navigation("CarrotRootContents");

                    b.Navigation("CarrotUserSiteMappings");
                });

            modelBuilder.Entity("Carrotware.CMS.Data.Models.CarrotWidget", b =>
                {
                    b.Navigation("CarrotWidgetData");
                });
#pragma warning restore 612, 618
        }
    }
}
