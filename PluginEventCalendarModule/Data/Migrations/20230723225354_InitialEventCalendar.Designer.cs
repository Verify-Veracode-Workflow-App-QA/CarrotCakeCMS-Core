// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using CarrotCake.CMS.Plugins.EventCalendarModule.Data;

#nullable disable

namespace CarrotCake.CMS.Plugins.EventCalendarModule.Data.Migrations
{
    [DbContext(typeof(CalendarContext))]
    [Migration("20230723225354_InitialEventCalendar")]
    partial class InitialEventCalendar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEvent", b =>
                {
                    b.Property<Guid>("CalendarEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CalendarEventProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventProfileID");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventDetail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<TimeSpan?>("EventEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EventStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.HasKey("CalendarEventId");

                    b.HasIndex("CalendarEventProfileId");

                    b.ToTable("carrot_CalendarEvent", (string)null);
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEventCategory", b =>
                {
                    b.Property<Guid>("CalendarEventCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventCategoryID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CategoryBGColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("CategoryBGColor");

                    b.Property<string>("CategoryFGColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("CategoryFGColor");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("SiteID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.HasKey("CalendarEventCategoryId");

                    b.ToTable("carrot_CalendarEventCategory", (string)null);
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEventProfile", b =>
                {
                    b.Property<Guid>("CalendarEventProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventProfileID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CalendarEventCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventCategoryID");

                    b.Property<Guid>("CalendarFrequencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarFrequencyID");

                    b.Property<string>("EventDetail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EventEndTime")
                        .HasColumnType("time");

                    b.Property<int?>("EventRepeatPattern")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EventStartTime")
                        .HasColumnType("time");

                    b.Property<string>("EventTitle")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsAllDayEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnnualHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelledPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("RecursEvery")
                        .HasColumnType("int");

                    b.Property<Guid>("SiteID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.HasKey("CalendarEventProfileId");

                    b.HasIndex("CalendarEventCategoryId");

                    b.HasIndex("CalendarFrequencyId");

                    b.ToTable("carrot_CalendarEventProfile", (string)null);
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarFrequency", b =>
                {
                    b.Property<Guid>("CalendarFrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarFrequencyID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("FrequencyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("FrequencySortOrder")
                        .HasColumnType("int");

                    b.Property<string>("FrequencyValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CalendarFrequencyId");

                    b.ToTable("carrot_CalendarFrequency", (string)null);
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.ViewCalendarEvent", b =>
                {
                    b.Property<Guid>("CalendarEventCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventCategoryID");

                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventID");

                    b.Property<Guid>("CalendarEventProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventProfileID");

                    b.Property<Guid>("CalendarFrequencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarFrequencyID");

                    b.Property<string>("CategoryBGColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("CategoryBGColor");

                    b.Property<string>("CategoryFGColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("CategoryFGColor");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventDetail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EventEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EventEndTimeOverride")
                        .HasColumnType("time");

                    b.Property<int?>("EventRepeatPattern")
                        .HasColumnType("int");

                    b.Property<string>("EventSeriesDetail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EventStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EventStartTimeOverride")
                        .HasColumnType("time");

                    b.Property<string>("EventTitle")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FrequencyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("FrequencySortOrder")
                        .HasColumnType("int");

                    b.Property<string>("FrequencyValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsAllDayEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnnualHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelledEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelledPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelledSeries")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("RecursEvery")
                        .HasColumnType("int");

                    b.Property<Guid>("SiteID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.ToView("vw_carrot_CalendarEvent");
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.ViewCalendarEventProfile", b =>
                {
                    b.Property<Guid>("CalendarEventCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventCategoryID");

                    b.Property<Guid>("CalendarEventProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarEventProfileID");

                    b.Property<Guid>("CalendarFrequencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarFrequencyID");

                    b.Property<string>("CategoryBGColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("CategoryBGColor");

                    b.Property<string>("CategoryFGColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("CategoryFGColor");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("EventDetail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EventEndTime")
                        .HasColumnType("time");

                    b.Property<int?>("EventRepeatPattern")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EventStartTime")
                        .HasColumnType("time");

                    b.Property<string>("EventTitle")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FrequencyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("FrequencySortOrder")
                        .HasColumnType("int");

                    b.Property<string>("FrequencyValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsAllDayEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnnualHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelledPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("RecursEvery")
                        .HasColumnType("int");

                    b.Property<Guid>("SiteID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SiteID");

                    b.ToView("vw_carrot_CalendarEventProfile");
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEvent", b =>
                {
                    b.HasOne("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEventProfile", "CalendarEventProfile")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarEventProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_CalendarEvent_carrot_CalendarEventProfile");

                    b.Navigation("CalendarEventProfile");
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEventProfile", b =>
                {
                    b.HasOne("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEventCategory", "CalendarEventCategory")
                        .WithMany("CalendarEventProfiles")
                        .HasForeignKey("CalendarEventCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_CalendarEventProfile_carrot_CalendarEventCategory");

                    b.HasOne("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarFrequency", "CalendarFrequency")
                        .WithMany("CalendarEventProfiles")
                        .HasForeignKey("CalendarFrequencyId")
                        .IsRequired()
                        .HasConstraintName("FK_carrot_CalendarEventProfile_carrot_CalendarFrequency");

                    b.Navigation("CalendarEventCategory");

                    b.Navigation("CalendarFrequency");
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEventCategory", b =>
                {
                    b.Navigation("CalendarEventProfiles");
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarEventProfile", b =>
                {
                    b.Navigation("CalendarEvents");
                });

            modelBuilder.Entity("CarrotCake.CMS.Plugins.EventCalendarModule.Data.CalendarFrequency", b =>
                {
                    b.Navigation("CalendarEventProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
